/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uncuyo.proyecto.view;

import com.uncuyo.proyecto.controller.ClienteController;
import com.uncuyo.proyecto.controller.ReservaController;
import com.uncuyo.proyecto.model.Cliente;
import com.uncuyo.proyecto.model.Reserva;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author spaul
 */
public class Tablas extends javax.swing.JFrame {

    /**
     * Creates new form Tablas
     */
    public Tablas() {
        initComponents();
        iniciarCompVisuales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblReserva = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 51, 51));

        tblReserva.setBackground(new java.awt.Color(102, 102, 102));
        tblReserva.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tblReserva.setForeground(new java.awt.Color(255, 255, 255));
        tblReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReserva.setGridColor(new java.awt.Color(255, 51, 0));
        tblReserva.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tblReserva.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReservaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReserva);

        tblCliente.setBackground(new java.awt.Color(102, 102, 102));
        tblCliente.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tblCliente.setForeground(new java.awt.Color(255, 255, 255));
        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblCliente);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Tablas de reservas y clientes:");

        btVolver.setText("Volver");
        btVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btVolverMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1079, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(btVolver)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblReservaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReservaMouseClicked
        int row = tblReserva.rowAtPoint(evt.getPoint());
        int col = tblReserva.columnAtPoint(evt.getPoint());
        System.out.println("row = " +  row + "col" + col);
        System.out.println("********************************");
        Long reservaCod =(Long)tblReserva.getValueAt(row,0);
        //System.out.println(reservaCod);
        System.out.println("*********************************");
        System.out.print("Codigo de reserva: " +reservaCod);        
        Reserva reserva = reservactrl.getReserva(reservaCod);
        System.out.println("+++++++++++++++++++++++++++++++");
        System.out.println(reserva.toString());
        System.out.println("+++++++++++++++++++++++++++++++");
        List<Reserva>reservas = reservactrl.getReservas();
        System.out.println("Tamanio de la lista de reservas " + reservas.size());
        System.out.println("Reservas:");
        for(Reserva res:reservas){
            System.out.println(res.toString());
        }
    }//GEN-LAST:event_tblReservaMouseClicked

    private void btVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btVolverMouseClicked
        this.dispose();
    }//GEN-LAST:event_btVolverMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Tablas tablas = new Tablas();
                tablas.setVisible(true);
                tablas.setLocationRelativeTo(null);
            }
        });
    }
    
    public void iniciarCompVisuales(){
        List<Reserva> reservas = reservactrl.getReservas();
        reservaModel = new ReservaTableModel(reservas);
        tblReserva.setModel(reservaModel);        
        Long id =reservas.getFirst().getCodReserva();
        Reserva reserva = reservactrl.getReserva(id);
        List<Cliente> clientes = clientectrl.getClientes();
        clienteModel = new ClienteTableModel(clientes);
        tblCliente.setModel(clienteModel);        
    }
    
    
    private final ReservaController reservactrl = new ReservaController();
    private final ClienteController clientectrl= new ClienteController();
    private ReservaTableModel reservaModel;
    private ClienteTableModel clienteModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTable tblReserva;
    // End of variables declaration//GEN-END:variables
}

class ReservaTableModel extends AbstractTableModel {
    private List<Reserva> reservas;
    private final String[] columnNames = {"Codigo reserva", "Destino", "Fecha", "Hora"};
    private Long idClicked=-1L;

    public ReservaTableModel(List<Reserva> reservas) {
        this.reservas = reservas;
    }

    @Override
    public int getRowCount() {
        return reservas.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    //retorna el valor de una fila y columna especifica
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Reserva reserva = reservas.get(rowIndex);
        switch (columnIndex) {
            case 0: return reserva.getCodReserva();
            case 1: return reserva.getDestino();
            case 2: return reserva.getFecha();
            case 3: return reserva.getHora();
            default: return null;
        }
    }
    
    //retorna el nombre de esa columna
    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false; // Permite la edición en todas las celdas
    }
    
    //establece un nuevo valor en una determinada posicion de la tabla
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Reserva reserva = reservas.get(rowIndex);
        switch (columnIndex) {
            case 0: reserva.setCodReserva((Long) value); break;
            case 1: reserva.setDestino((String) value); break;
            case 2: reserva.setFecha((LocalDate) value); break;
            case 3: reserva.setHora((LocalTime) value); break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

    public void addReserva(Reserva reserva) {
        reservas.add(reserva);
        fireTableRowsInserted(reservas.size() - 1, reservas.size() - 1);
    }

    public void removeReserva(int rowIndex) {
        reservas.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public void updateReserva(int rowIndex, Reserva reserva) {
        reservas.set(rowIndex, reserva);
        fireTableRowsUpdated(rowIndex, rowIndex);
    }
    
    
}
class ClienteTableModel extends AbstractTableModel {
    private List<Cliente> clientes;
    private final String[] columnNames = {"Codigo cliente", "Nombre", "DNI", "Celular", "Ubicación"};
    private Long idClicked=-1L;

    public ClienteTableModel(List<Cliente> clientes) {
        this.clientes = clientes;
    }

    @Override
    public int getRowCount() {
        return clientes.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Cliente cliente = clientes.get(rowIndex);
        switch (columnIndex) {
            case 0: return cliente.getCodCliente();
            case 1: return cliente.getNombre();
            case 2: return cliente.getDni();
            case 3: return cliente.getCelular();
            case 4: return cliente.getUbicacion();
            default: return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false; // Permite la edición en todas las celdas
    }

    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Cliente cliente = clientes.get(rowIndex);
        switch (columnIndex) {
            case 0: cliente.setCodCliente((Long) value); break;
            case 1: cliente.setNombre((String) value); break;
            case 2: cliente.setDni((String) value); break;
            case 3: cliente.setCelular((String) value); break;
            case 4: cliente.setUbicacion((String) value); break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

    public void addCliente(Cliente cliente) {
        clientes.add(cliente);
        fireTableRowsInserted(clientes.size() - 1, clientes.size() - 1);
    }

    public void removeCliente(int rowIndex) {
        clientes.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public void updateCliente(int rowIndex, Cliente cliente) {
        clientes.set(rowIndex, cliente);
        fireTableRowsUpdated(rowIndex, rowIndex);
    }
    
}
