/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uncuyo.proyecto.view;

import com.uncuyo.proyecto.controller.ClienteController;
import com.uncuyo.proyecto.controller.ReservaController;
import com.uncuyo.proyecto.model.Cliente;
import com.uncuyo.proyecto.model.Reserva;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReservaFrame
     */
    public MainFrame() {
        initComponents();
        iniciarCompVisuales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mendozaRemis = new javax.swing.JLabel();
        btRealizarR = new javax.swing.JButton();
        btModificarR = new javax.swing.JButton();
        btCancelarR = new javax.swing.JButton();
        btSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblReserva = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        mendozaRemis.setBackground(new java.awt.Color(255, 51, 153));
        mendozaRemis.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        mendozaRemis.setText("MENDOZA REMIS");

        btRealizarR.setText("Realizar reserva");
        btRealizarR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btRealizarRMouseClicked(evt);
            }
        });

        btModificarR.setText("Modificar reserva");
        btModificarR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btModificarRMouseClicked(evt);
            }
        });

        btCancelarR.setText("Cancelar reserva");
        btCancelarR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarRActionPerformed(evt);
            }
        });

        btSalir.setText("Salir");
        btSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btSalirMouseClicked(evt);
            }
        });

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCliente);

        tblReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblReserva);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("CLIENTES");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("RESERVAS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(btRealizarR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btCancelarR)
                .addGap(172, 172, 172)
                .addComponent(btModificarR)
                .addGap(166, 166, 166)
                .addComponent(btSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(448, 448, 448)
                        .addComponent(mendozaRemis, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mendozaRemis, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRealizarR)
                    .addComponent(btCancelarR)
                    .addComponent(btModificarR)
                    .addComponent(btSalir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarRActionPerformed
        CancelarReserva.main(new String[0]);
    }//GEN-LAST:event_btCancelarRActionPerformed

    private void btRealizarRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btRealizarRMouseClicked
        ReservaFrame.main(new String[0]); 
    }//GEN-LAST:event_btRealizarRMouseClicked

    private void btModificarRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btModificarRMouseClicked
        ModificarReserva.main(new String[0]);
    }//GEN-LAST:event_btModificarRMouseClicked

    private void btSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSalirMouseClicked
        this.dispose(); 
    }//GEN-LAST:event_btSalirMouseClicked


    public static void main(String[] args) {
         // Crear una instancia de MainFrame
        MainFrame mainFrame = new MainFrame();
       
        
        // Configurar la operaci√≥n de cierre de la ventana principal
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Mostrar la ventana principal
        mainFrame.setVisible(true);
        mainFrame.setLocationRelativeTo(null);
    }
    

    
    public Cliente setDatosCliente(String nombre, String dni,String celular, String ubicacion, Long cod_cliente){
        System.out.println(nombre + " - " + dni + " " + celular + " " + ubicacion );
        Cliente cliente = new Cliente(cod_cliente, dni, nombre, ubicacion, celular);
        clientectrl.insertarCliente(cliente);
        return cliente;
    }
    
    public void setDatosReserva(String destino, LocalDate fecha_reserva, LocalTime hora, long cod_reserva, long cod_cliente, Cliente cliente) {
            Reserva reserva = new Reserva(cod_reserva, destino, fecha_reserva, hora);
            reserva.setCliente(cliente);
            reservactrl.insertarReserva(reserva);
            JOptionPane.showMessageDialog(null, "Reserva finalizada! Su codigo de reserva es: " + reserva.getCodReserva());
            //System.out.println("Reserva finalizada! Su codigo de reserva es: " + reserva.getCodReserva());
  
}
    public LocalDate verificarFecha(String fecha) {
        try {
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate fechaReserva = LocalDate.parse(fecha, dateFormatter);
            if (fechaReserva.isEqual(LocalDate.now()) || fechaReserva.isAfter(LocalDate.now())) {
                return fechaReserva;
            } else {
              JOptionPane.showMessageDialog(null, "No puede ingresar una fecha pasada. Por favor, ingrese una fecha v√°lida.");
              //System.out.println("No puede ingresar una fecha pasada. Por favor, ingrese una fecha v√°lida." ); 
              return null;
            }
            
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "La fecha no es valida. Intente nuevamente. Formato: AAAA-MM-DD");
            //System.out.println("La fecha no es valida. Intente nuevamente. Formato: AAAA-MM-DD" );
            return null;
        }
    }
    //Exception in thread "AWT-EventQueue-0" java.time.format.DateTimeParseException: Text 'gfs' could not be parsed at index 0
    public LocalTime verificarHora(String hora){
        try {
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
            LocalTime hora_reserva = LocalTime.parse(hora, timeFormatter);
            if (hora_reserva.equals(LocalTime.now()) || hora_reserva.isAfter(LocalTime.now())) {
                return hora_reserva;
            } else {
              JOptionPane.showMessageDialog(null, "No puede ingresar una hora pasada o actual. Por favor, ingrese una hora v√°lida." );
              //System.out.println("No puede ingresar una hora pasada o actual. Por favor, ingrese una hora v√°lida." ); 
                return null;
            }
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "La hora no es valida. Intente nuevamente. Formato: HH:MM\"" );
            //System.out.println("La hora no es valida. Intente nuevamente. Formato: HH:MM" );
            return null;
        }
    }
    
        public Long verificar_cod(String cod) {
        try {
            long cod_reserva = Long.parseLong(cod);
            Reserva reserva = reservactrl.getReserva(cod_reserva);
            if (reserva == null) {
                JOptionPane.showMessageDialog(null, "El codigo de reserva no existe");
                //System.out.println("El codigo de reserva no existe");
                return null;
            } else {
                return cod_reserva;
            }
        } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El codigo de reserva no es valido");
                //System.out.println("El codigo de reserva no es valido");
                return null;
        }
    }
 
    public void iniciarCompVisuales(){
        List<Reserva> reservas = reservactrl.getReservas();
        reservaModel = new ReservaTableModel(reservas);
        tblReserva.setModel(reservaModel);        
        Long id =reservas.getFirst().getCodReserva();
        Reserva reserva = reservactrl.getReserva(id);
        List<Cliente> clientes = clientectrl.getClientes();
        clienteModel = new ClienteTableModel(clientes);
        tblCliente.setModel(clienteModel);        
    }        
        
    //private MainFrame mainframe;
    private final ReservaController reservactrl = new ReservaController();
    private final ClienteController clientectrl= new ClienteController();
    private ReservaTableModel reservaModel;
    private ClienteTableModel clienteModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelarR;
    private javax.swing.JButton btModificarR;
    private javax.swing.JButton btRealizarR;
    private javax.swing.JButton btSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel mendozaRemis;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTable tblReserva;
    // End of variables declaration//GEN-END:variables

}

class ReservaTableModel extends AbstractTableModel {
    private List<Reserva> reservas;
    private final String[] columnNames = {"Codigo reserva", "Destino", "Fecha", "Hora", "Codigo cliente"};
    private Long idClicked=-1L;

    public ReservaTableModel(List<Reserva> reservas) {
        this.reservas = reservas;
    }

    @Override
    public int getRowCount() {
        return reservas.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    //retorna el valor de una fila y columna especifica
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Reserva reserva = reservas.get(rowIndex);
        switch (columnIndex) {
            case 0: return reserva.getCodReserva();
            case 1: return reserva.getDestino();
            case 2: return reserva.getFecha();
            case 3: return reserva.getHora();
            case 4: return (reserva.getCliente()).getCodCliente();
            default: return null;
        }
    }
    
    //retorna el nombre de esa columna
    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false; // Permite la edici√≥n en todas las celdas
    }
    
    //establece un nuevo valor en una determinada posicion de la tabla
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Reserva reserva = reservas.get(rowIndex);
        switch (columnIndex) {
            case 0: reserva.setCodReserva((Long) value); break;
            case 1: reserva.setDestino((String) value); break;
            case 2: reserva.setFecha((LocalDate) value); break;
            case 3: reserva.setHora((LocalTime) value); break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

    public void addReserva(Reserva reserva) {
        reservas.add(reserva);
        fireTableRowsInserted(reservas.size() - 1, reservas.size() - 1);
    }

    public void removeReserva(int rowIndex) {
        reservas.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public void updateReserva(int rowIndex, Reserva reserva) {
        reservas.set(rowIndex, reserva);
        fireTableRowsUpdated(rowIndex, rowIndex);
    }
    
    
}
class ClienteTableModel extends AbstractTableModel {
    private List<Cliente> clientes;
    private final String[] columnNames = {"Codigo cliente", "Nombre", "DNI", "Celular", "Ubicaci√≥n"};
    private Long idClicked=-1L;

    public ClienteTableModel(List<Cliente> clientes) {
        this.clientes = clientes;
    }

    @Override
    public int getRowCount() {
        return clientes.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Cliente cliente = clientes.get(rowIndex);
        switch (columnIndex) {
            case 0: return cliente.getCodCliente();
            case 1: return cliente.getNombre();
            case 2: return cliente.getDni();
            case 3: return cliente.getCelular();
            case 4: return cliente.getUbicacion();
            default: return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false; // Permite la edici√≥n en todas las celdas
    }

    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Cliente cliente = clientes.get(rowIndex);
        switch (columnIndex) {
            case 0: cliente.setCodCliente((Long) value); break;
            case 1: cliente.setNombre((String) value); break;
            case 2: cliente.setDni((String) value); break;
            case 3: cliente.setCelular((String) value); break;
            case 4: cliente.setUbicacion((String) value); break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

    public void addCliente(Cliente cliente) {
        clientes.add(cliente);
        fireTableRowsInserted(clientes.size() - 1, clientes.size() - 1);
    }

    public void removeCliente(int rowIndex) {
        clientes.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public void updateCliente(int rowIndex, Cliente cliente) {
        clientes.set(rowIndex, cliente);
        fireTableRowsUpdated(rowIndex, rowIndex);
    }
    
}